{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to django-qlued","text":"<p>django-qlued is a django package that allows you to submit jobs quantum various quantum hardware architectures. It is meant to be easily integrated in existing Django instances. For a deployabled example see qlued.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>API based on the very efficient django-ninja.</li> <li>API fully compatible with qiskit.</li> <li>Safety features directly integrated through Django.</li> <li>Easy to deploy in existing Django instances.</li> <li>Full support for backends that integrate with sqooler.</li> </ul>"},{"location":"#our-other-projects-projects","title":"Our other projects projects","text":"<ul> <li><code>qlued</code> - template to deploy this package in a Django instance.</li> <li><code>sqooler</code> - Simulator backends.</li> </ul>"},{"location":"#related-projects","title":"Related projects","text":"<ul> <li><code>qiskit-cold-atom</code> - QisKit examples.</li> <li>depreceated expamples at <code>pennylane-ls</code> - Pennylane examples by synqs.</li> </ul>"},{"location":"api/","title":"Documentation of the API","text":"<p>Module that defines the user api v2 which goes through django-ninja.</p>"},{"location":"api/#src.qlued.api_v2.get_backend_status","title":"<code>get_backend_status(request, backend_name)</code>","text":"<p>Returns the status of the backend. This is an API implementation of the class <code>qiskit.providers.models.BackendStatus</code></p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The request object.</p> required <code>backend_name</code> <code>str</code> <p>The name of the backend.</p> required <p>Returns:</p> Type Description <p>The status of the backend.</p> <p>Raises:</p> Type Description <code>404</code> <p>If the backend is not found.</p> Source code in <code>src/qlued/api_v2.py</code> <pre><code>@api.get(\n    \"{backend_name}/get_backend_status\",\n    response={200: BackendStatusSchemaOut, codes_4xx: StatusMsgDict},\n    tags=[\"Backend\"],\n    url_name=\"get_backend_status\",\n)\ndef get_backend_status(request, backend_name: str):\n    \"\"\"\n    Returns the status of the backend. This is an API implementation of the class\n    `qiskit.providers.models.BackendStatus`\n\n    Args:\n        request: The request object.\n        backend_name: The name of the backend.\n\n    Returns:\n        The status of the backend.\n\n    Raises:\n        404: If the backend is not found.\n    \"\"\"\n    # pylint: disable=W0613\n\n    # we have to split the name into several parts by `_`. If there is only one part, then we\n    # assume that the user has given the short name of the backend. If there are more parts, then\n    # we assume that the user has given the full name of the backend.\n    short_backend = get_short_backend_name(backend_name)\n    if not short_backend:\n        job_response_dict = {\n            \"job_id\": \"None\",\n            \"status\": \"ERROR\",\n            \"detail\": \"Unknown back-end! The string should have 1 or three parts separated by `_`!\",\n            \"error_message\": \"Unknown back-end!\",\n        }\n        return 404, job_response_dict\n\n    try:\n        storage_provider = get_storage_provider(backend_name)\n    except FileNotFoundError:\n        job_response_dict = {\n            \"job_id\": \"None\",\n            \"status\": \"ERROR\",\n            \"detail\": \"Unknown back-end! The string should have 1 or three parts separated by `_`!\",\n            \"error_message\": \"Unknown back-end!\",\n        }\n        return 404, job_response_dict\n    return storage_provider.get_backend_status(short_backend)\n</code></pre>"},{"location":"api/#src.qlued.api_v2.get_config","title":"<code>get_config(request, backend_name)</code>","text":"<p>Returns the configuration of the backend. This is an API implementation of the class <code>qiskit.providers.models.BackendConfiguration</code></p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The request object.</p> required <code>backend_name</code> <code>str</code> <p>The name of the backend.</p> required <p>Returns:</p> Type Description <p>The configuration of the backend.</p> <p>Raises:</p> Type Description <code>404</code> <p>If the backend is not found.</p> Source code in <code>src/qlued/api_v2.py</code> <pre><code>@api.get(\n    \"{backend_name}/get_config\",\n    response={200: BackendConfigSchemaOut, codes_4xx: StatusMsgDict},\n    tags=[\"Backend\"],\n    url_name=\"get_config\",\n)\ndef get_config(request, backend_name: str):\n    \"\"\"\n    Returns the configuration of the backend. This is an API implementation of the class\n    `qiskit.providers.models.BackendConfiguration`\n\n    Args:\n        request: The request object.\n        backend_name: The name of the backend.\n\n    Returns:\n        The configuration of the backend.\n\n    Raises:\n        404: If the backend is not found.\n    \"\"\"\n    # pylint: disable=W0613\n\n    # we have to split the name into several parts by `_`. If there is only one part, then we\n    # assume that the user has given the short name of the backend. If there are more parts, then\n    # we assume that the user has given the full name of the backend.\n    short_backend = get_short_backend_name(backend_name)\n    if not short_backend:\n        job_response_dict = {\n            \"job_id\": \"None\",\n            \"status\": \"ERROR\",\n            \"detail\": \"Unknown back-end! The string should have 1 or three parts separated by `_`!\",\n            \"error_message\": \"Unknown back-end!\",\n        }\n        return 404, job_response_dict\n\n    storage_provider = get_storage_provider(backend_name)\n    config_info = storage_provider.get_backend_dict(short_backend)\n    # we have to add the URL to the backend configuration\n    base_url = config(\"BASE_URL\")\n\n    if config_info.simulator:\n        full_backend_name = f\"{storage_provider.name}_{short_backend}_simulator\"\n    else:\n        full_backend_name = f\"{storage_provider.name}_{short_backend}_hardware\"\n\n    config_info.url = base_url + \"/api/v2/\" + full_backend_name + \"/\"\n\n    return config_info\n</code></pre>"},{"location":"api/#src.qlued.api_v2.get_job_result","title":"<code>get_job_result(request, backend_name, job_id, token)</code>","text":"<p>A view to obtain the results of job that was previously submitted to the backend.</p> Source code in <code>src/qlued/api_v2.py</code> <pre><code>@api.get(\n    \"{backend_name}/get_job_result\",\n    response={200: dict, codes_4xx: StatusMsgDict},\n    tags=[\"Backend\"],\n    url_name=\"get_job_result\",\n)\ndef get_job_result(request, backend_name: str, job_id: str, token: str):\n    \"\"\"\n    A view to obtain the results of job that was previously submitted to the backend.\n    \"\"\"\n    # pylint: disable=W0613, R0914, R0911\n    status_msg_draft = {\n        \"job_id\": \"None\",\n        \"status\": \"None\",\n        \"detail\": \"None\",\n        \"error_message\": \"None\",\n    }\n\n    try:\n        token_object = Token.objects.get(key=token)\n    except Token.DoesNotExist:\n        status_msg_draft[\"status\"] = \"ERROR\"\n        status_msg_draft[\"error_message\"] = \"Invalid credentials!\"\n        status_msg_draft[\"detail\"] = \"Invalid credentials!\"\n        return 401, status_msg_draft\n\n    username = token_object.user.username\n    short_backend = get_short_backend_name(backend_name)\n    storage_provider = get_storage_provider(backend_name)\n    backend_names = storage_provider.get_backends()\n    if short_backend not in backend_names:\n        status_msg_draft[\"status\"] = \"ERROR\"\n        status_msg_draft[\"detail\"] = \"Unknown back-end!\"\n        status_msg_draft[\"error_message\"] = \"Unknown back-end!\"\n        return 404, status_msg_draft\n\n    status_msg_draft[\"job_id\"] = job_id\n    # pylint: disable=W0702\n    # request the data from the queue\n    try:\n        status_msg_dict = storage_provider.get_status(\n            display_name=short_backend, username=username, job_id=job_id\n        )\n        status_msg_draft = status_msg_dict.model_dump()\n        if status_msg_draft[\"status\"] != \"DONE\":\n            return 200, status_msg_draft\n    except:\n        status_msg_draft[\"detail\"] = (\n            \"Error getting status from database. Maybe invalid JOB ID!\"\n        )\n        status_msg_draft[\"error_message\"] = (\n            \"Error getting status from database. Maybe invalid JOB ID!\"\n        )\n        return 406, status_msg_draft\n    # and if the status is switched to done, we can also obtain the result\n    try:\n        result_dict = storage_provider.get_result(\n            display_name=short_backend, username=username, job_id=job_id\n        )\n\n        return 200, result_dict\n    except:\n        status_msg_draft[\"detail\"] = \"Error getting result from database!\"\n        status_msg_draft[\"error_message\"] = \"Error getting result from database!\"\n        return 406, status_msg_draft\n</code></pre>"},{"location":"api/#src.qlued.api_v2.get_job_status","title":"<code>get_job_status(request, backend_name, job_id, token)</code>","text":"<p>A view to check the job status that was previously submitted to the backend.</p> Source code in <code>src/qlued/api_v2.py</code> <pre><code>@api.get(\n    \"{backend_name}/get_job_status\",\n    response={200: StatusMsgDict, codes_4xx: StatusMsgDict},\n    tags=[\"Backend\"],\n    url_name=\"get_job_status\",\n)\ndef get_job_status(request, backend_name: str, job_id: str, token: str):\n    \"\"\"\n    A view to check the job status that was previously submitted to the backend.\n    \"\"\"\n    # pylint: disable=W0613\n    job_response_dict = {\n        \"job_id\": \"None\",\n        \"status\": \"None\",\n        \"detail\": \"None\",\n        \"error_message\": \"None\",\n    }\n    # first we need to validate the token and make sure that the user is allowed to look for the job\n    try:\n        token_object = Token.objects.get(key=token)\n    except Token.DoesNotExist:\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"error_message\"] = \"Invalid credentials!\"\n        job_response_dict[\"detail\"] = \"Invalid credentials!\"\n        return 401, job_response_dict\n\n    username = token_object.user.username\n    storage_provider = get_storage_provider(backend_name)\n    backend_names = storage_provider.get_backends()\n    short_backend = get_short_backend_name(backend_name)\n    if short_backend not in backend_names:\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"detail\"] = \"Unknown back-end!\"\n        job_response_dict[\"error_message\"] = \"Unknown back-end!\"\n        return 404, job_response_dict\n\n    # complicated right now\n    # pylint: disable=W0702\n    try:\n        job_response_dict[\"job_id\"] = job_id\n    except:\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"detail\"] = \"Error loading json data from input request!\"\n        job_response_dict[\"error_message\"] = (\n            \"Error loading json data from input request!\"\n        )\n        return 406, job_response_dict\n    try:\n        # now we download the status json from the backend\n        # this is currently very much backend specific\n        storage_provider = get_storage_provider(backend_name)\n\n        job_response_dict = storage_provider.get_status(\n            display_name=short_backend, username=username, job_id=job_id\n        )\n\n        return 200, job_response_dict\n    except:\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"detail\"] = (\n            \"Error getting status from database. Maybe invalid JOB ID!\"\n        )\n        job_response_dict[\"error_message\"] = (\n            \"Error getting status from database. Maybe invalid JOB ID!\"\n        )\n        return 406, job_response_dict\n</code></pre>"},{"location":"api/#src.qlued.api_v2.list_backends","title":"<code>list_backends(request)</code>","text":"<p>Returns the list of backends, excluding any device called \"dummy_\" as they are test systems.</p> Source code in <code>src/qlued/api_v2.py</code> <pre><code>@api.get(\n    \"/backends\",\n    response=list[BackendConfigSchemaOut],\n    tags=[\"Backend\"],\n    url_name=\"get_backends\",\n)\ndef list_backends(request):\n    \"\"\"\n    Returns the list of backends, excluding any device called \"dummy_\" as they are test systems.\n    \"\"\"\n    # pylint: disable=W0613, E1101\n\n    backend_list = []\n\n    # obtain all the available storage providers from the database\n    storage_provider_entries = StorageProviderDb.objects.all()\n\n    # now loop through them and obtain the backends\n    for storage_provider_entry in storage_provider_entries:\n        if not storage_provider_entry.is_active:\n            continue\n        storage_provider = get_storage_provider_from_entry(storage_provider_entry)\n\n        backend_names = storage_provider.get_backends()\n        for backend in backend_names:\n            # for testing we created dummy devices. We should ignore them in any other cases.\n            if not \"dummy\" in backend:\n                config_dict = storage_provider.get_backend_dict(backend)\n                backend_list.append(config_dict)\n    return backend_list\n</code></pre>"},{"location":"api/#src.qlued.api_v2.post_job","title":"<code>post_job(request, data, backend_name)</code>","text":"<p>A view to submit the job to the backend.</p> Source code in <code>src/qlued/api_v2.py</code> <pre><code>@api.post(\n    \"{backend_name}/post_job\",\n    response={200: StatusMsgDict, codes_4xx: StatusMsgDict},\n    tags=[\"Backend\"],\n    url_name=\"post_job\",\n)\ndef post_job(request, data: JobSchemaWithTokenIn, backend_name: str):\n    \"\"\"\n    A view to submit the job to the backend.\n    \"\"\"\n    # pylint: disable=R0914, W0613\n    job_response_dict = {\n        \"job_id\": \"None\",\n        \"status\": \"None\",\n        \"detail\": \"None\",\n        \"error_message\": \"None\",\n    }\n\n    # first we need to validate the token and make sure that the user is allowed to submit jobs\n    api_key = data.token\n\n    try:\n        token = Token.objects.get(key=api_key)\n    except Token.DoesNotExist:\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"error_message\"] = \"Invalid credentials!\"\n        job_response_dict[\"detail\"] = \"Invalid credentials!\"\n        return 401, job_response_dict\n\n    username = token.user.username\n    # get the proper backend name\n    short_backend = get_short_backend_name(backend_name)\n    # now it is time to look for the backend\n    storage_provider = get_storage_provider(backend_name)\n    backend_names = storage_provider.get_backends()\n    if short_backend not in backend_names:\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"detail\"] = \"Unknown back-end!\"\n        job_response_dict[\"error_message\"] = \"Unknown back-end!\"\n        return 404, job_response_dict\n\n    # as the backend is known, we can now try to submit the job\n    try:\n        job_dict = json.loads(data.job)\n    except json.decoder.JSONDecodeError:\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"detail\"] = \"The encoding of your json seems not work out!\"\n        job_response_dict[\"error_message\"] = (\n            \"The encoding of your json seems not work out!\"\n        )\n        return 406, job_response_dict\n    try:\n        storage_provider = get_storage_provider(backend_name)\n\n        # upload the job to the backend via the storage provider\n        job_id = storage_provider.upload_job(\n            job_dict=job_dict, display_name=short_backend, username=username\n        )\n\n        # now we upload the status json to the backend. this is the same status json\n        # that is returned to the user\n        job_response_dict = storage_provider.upload_status(\n            display_name=short_backend,\n            username=username,\n            job_id=job_id,\n        )\n        return job_response_dict\n    except (AuthError, ApiError):\n        job_response_dict[\"status\"] = \"ERROR\"\n        job_response_dict[\"detail\"] = \"Error saving json data to database!\"\n        job_response_dict[\"error_message\"] = \"Error saving json data to database!\"\n        return 406, job_response_dict\n</code></pre>"},{"location":"contributing/","title":"Welcome to the qlued contributing guide","text":"<p>Thank you for investing your time in potentially contributing to our project! Any contribution you make will be reflected on the repository of the open source project qlued :sparkles:.</p> <p>You can contribute to the qlued  content and site in several ways, which we will present you below. </p>"},{"location":"contributing/#mega-discussions","title":":mega: Discussions","text":"<p>Discussions are where we have conversations.</p> <p>If you'd like help troubleshooting a qlued PR you're working on, have a great new idea, or want to share something amazing you've learned about quantum hardware access, join us in discussions.</p>"},{"location":"contributing/#lady_beetle-issues","title":":lady_beetle: Issues","text":"<p>Issues are used to track tasks that contributors can help with. </p> <p>If you've found something in the content or the code that should be updated, search open issues to see if someone else has reported the same thing. If it's something new, open an issue here. We'll use the issue to have a conversation about the problem you want to fix.</p>"},{"location":"contributing/#create-a-new-issue","title":"Create a new issue","text":"<p>If you spot a problem with the docs, search if an issue already exists. If a related issue doesn't exist, you can open a new issue.</p>"},{"location":"contributing/#solve-an-issue","title":"Solve an issue","text":"<p>Scan through our existing issues to find one that interests you. You can narrow down the search using labels as filters. See Labels for more information. As a general rule, we don\u2019t assign issues to anyone. If you find an issue to work on, you are welcome to open a PR with a fix.</p>"},{"location":"contributing/#make-changes-in-the-github-ui","title":"Make Changes in the github UI","text":"<p>Click Make a contribution at the top of any page to make small changes such as a typo, sentence fix, or a broken link. This takes you to the .md file where you can make your changes and create a pull request for a review.</p>"},{"location":"contributing/#commit-your-update","title":"Commit your update","text":"<p>Commit the changes once you are happy with them. Don't forget to self-review to speed up the review process :zap:.</p>"},{"location":"contributing/#hammer_and_wrench-pull-requests","title":":hammer_and_wrench: Pull requests","text":"<p>A pull request is a way to suggest changes in our repository. When we merge those changes, they should be deployed to the live site almost immediately. :earth_africa:</p> <p>So when you're finished with the changes, create a pull request, also known as a PR.</p> <ul> <li>Fill the description so that we can review your PR. This template helps reviewers understand your changes as well as the purpose of your pull request. </li> <li>Don't forget to link PR to issue if you are solving one.</li> <li>Enable the checkbox to allow maintainer edits so the branch can be updated for a merge. Once you submit your PR, a qlued team member will review your proposal. We may ask questions or request additional information.</li> <li>We may ask for changes to be made before a PR can be merged, either using suggested changes or pull request comments. You can apply suggested changes directly through the UI. You can make any other changes in your fork, then commit them to your branch.</li> <li>As you update your PR and apply changes, mark each conversation as resolved.</li> <li>If you run into any merge issues, checkout this git tutorial to help you resolve merge conflicts and other issues.</li> </ul>"},{"location":"contributing/#your-pr-is-merged","title":"Your PR is merged!","text":"<p>Congratulations :tada::tada: The qlued team thanks you :sparkles:. </p> <p>Once your PR is merged, your contributions will be publicly visible on the qlued repo. </p> <p>Now you are part of the qlued community. Thank you for your contributions! We look forward to working with you to make our project even better.</p>"},{"location":"contributing/#attribution","title":"Attribution","text":"<p>These contribution guidelines are adapted from the contribution guidelines for Github docs, available online on the github.</p>"}]}